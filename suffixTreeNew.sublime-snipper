<snippet>
	<content><![CDATA[
struct SuffixTree {
	const int inf = 1e9;
	vector<map<int, int> > to;
	vector<char> s;
	vector<int> len;
	vector<int> fpos;
	vector<int> link;
	int node;
	int pos;
	int sz;
	int n;

	SuffixTree(string str) {
		int maxn = str.size() * 2 + 10;
		to.resize(maxn);
		s.resize(maxn);
		len.resize(maxn);
		len[0] = inf;
		fpos.resize(maxn);
		link.resize(maxn);
		node = 0;
		pos = 0;
		sz = 1;
		n = 0;
		for (auto c : str) {
			add_letter(c);
		}
		for (int i = 1; i < sz; ++i) {
			len[i] = min(len[i], n - fpos[i]);
		}
	}	

	int makeNode(int _pos, int _len) {
		fpos[sz] = _pos;
		len [sz] = _len;
		return sz++;
	}

	void goEdge() {	
		while (pos > len[to[node][s[n - pos]]]) {
			node = to[node][s[n - pos]];
			pos -= len[node];
		}
	}

	void add_letter(int c) {
		s[n++] = c;
		pos++;
		int last = 0;
		while(pos > 0) {
			goEdge();
			int edge = s[n - pos];
			int &v = to[node][edge];
			int t = s[fpos[v] + pos - 1];
			if(v == 0) {
				v = makeNode(n - pos, inf);
				link[last] = node;
				last = 0;
			}
			else if (t == c) {
				link[last] = node;
				return;
			}
			else {
				int u = makeNode(fpos[v], pos - 1);
				to[u][c] = makeNode(n - 1, inf);
				to[u][t] = v;
				fpos[v] += pos - 1;
				len [v] -= pos - 1;
				v = u;
				link[last] = u;
				last = u;
			}
			if(node == 0) {
				pos--;	
			}
			else {
				node = link[node];
			}
		}
	}

	void printTree() {
		string S(n, '1');
		for(int i=0;i<n;++i) {
			S[i] = s[i] + 'a';	
		}
		for(int i=0;i<sz;++i) {
			for(auto it : to[i]) {
				int v=it.second;
				cout << i << " " << v << " " << S.substr(fpos[v], len[v]) <<endl;
			}
		}	
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>importSuffixTreeNew</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
