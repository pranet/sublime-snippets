<snippet>
	<content><![CDATA[
/**
 * 0 - based indexing
 * 
 */
struct TwoSat {

    private:

        int n;
        vector<vector<int> > rg;
        vector<vector<int> > g;
        vector<int> order;
        int *scc;
        void __addEdge(int u, int v) {
            g[u].push_back(v);
            rg[v].push_back(u);
        }        

        void __or(int u, int v) {
            __addEdge(u ^ 1, v);
            __addEdge(v ^ 1, u);
        }

        void __dfs(int u) {
            state[u] = true;
            for (auto v : rg[u]) {
                if (!state[v]) {
                    __dfs(v);
                }                
            }
            order.push_back(u);
        }

        void __dfs2(int u, int id) {
            state[u] = false;
            scc[u] = id;
            for (auto v : g[u]) {
                if (state[v]) {
                    __dfs2(v, id);
                }
            }
        }

    public:

        bool *state;
        TwoSat(int n) : n(n) {
            g.resize(n * 2);
            rg.resize(n * 2);
            state = (bool *)calloc(n * 2, sizeof(bool));
            scc = (int *)malloc(n * 2 * sizeof(int));
        }

        void imply(int u, int v, bool uTrue, bool vTrue) {
            u = (u << 1) ^ (!uTrue);
            v = (v << 1) ^ (!vTrue);
            __or(u ^ 1, v);
        }   

        bool solve() {
            for (int i = 0; i < n + n; ++i) {
                if (!state[i]) {
                    __dfs(i);
                }
            }   
            
            reverse(order.begin(), order.end());
            int id = 0;
            for (auto i : order) {
                if (state[i]) {
                    __dfs2(i, id++);
                }
            }
            
            for (int i = 0; i < n + n; i += 2) {
                if (scc[i] == scc[i ^ 1]) {
                    return false;
                }
                state[i >> 1] = scc[i] < scc[i ^ 1];
            }
            return true;
        }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>importTwoSat</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
