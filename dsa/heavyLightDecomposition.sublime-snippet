<snippet>
	<content><![CDATA[
const int MAXN=1e5+5,LN=17;
vector<int> g[MAXN];
int dep[MAXN],sz[MAXN],pa[LN][MAXN],heavy[MAXN],chain[MAXN],st[MAXN],en[MAXN],pool=-1;
void dfs(int u,int p)
{
    dep[u]=dep[p]+1;
    pa[0][u]=p;
    heavy[u]=0;
    sz[u]=1;
    for(auto v:g[u])
    {
        if(v==p)
            continue;
        dfs(v,u);
        sz[u]+=sz[v];
        if(sz[v]>sz[heavy[u]])
            heavy[u]=v;
    }
}
void hld(int u,int p,int id)
{
    chain[u]=id;
    st[u]=++pool;
    if(heavy[u])
        hld(heavy[u],u,id);
    for(auto v:g[u])
    {
        if(v==p || v==heavy[u])
            continue;
        hld(v,u,v);
    }
    en[u]=pool;
}
int lca(int u,int v)
{
    if(dep[u]<dep[v])
        swap(u,v);
    int d=dep[u]-dep[v];
    for(int i=LN-1;i>=0;--i)
        if(d&(1<<i))
            u=pa[i][u];
    if(u==v)
        return u;
    for(int i=LN-1;i>=0;--i)
        if(pa[i][u]!=pa[i][v])
            u=pa[i][u],
            v=pa[i][v];
    return pa[0][u];
}
int kthAncestor(int u,int k)
{
    for(int i=LN-1;i>=0;--i)
        if(k&(1<<i))
            u=pa[i][u];
    return u;
}
/*g must be a 1-based tree*/   
void init(int n)
{
    dfs(1,0);
    hld(1,0,1); 
    for(int j=1;j<17;++j)
        for(int i=1;i<=n;++i)
            pa[j][i]=pa[j-1][pa[j-1][i]];
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>importHeavyLightDecomposition</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
