<snippet>
	<content><![CDATA[
struct NTT {
    int mod, root, root_1, root_pw;

    NTT(int c, int g, int root_pw) : root_pw(root_pw) {
        mod = c * root_pw + 1;
        root = pwr(g, c, mod);
        root_1 = pwr(root, mod - 2, mod);
    }

    void fft (vector<int> & a, bool invert) {
        int n = (int) a.size();
     
        for (int i=1, j=0; i<n; ++i) {
            int bit = n >> 1;
            for (; j>=bit; bit>>=1)
                j -= bit;
            j += bit;
            if (i < j)
                swap (a[i], a[j]);
        }
     
        for (int len=2; len<=n; len<<=1) {
            int wlen = invert ? root_1 : root;
            for (int i=len; i<root_pw; i<<=1)
                wlen = int (wlen * 1ll * wlen % mod);
            for (int i=0; i<n; i+=len) {
                int w = 1;
                for (int j=0; j<len/2; ++j) {
                    int u = a[i+j],  v = int (a[i+j+len/2] * 1ll * w % mod);
                    a[i+j] = u+v < mod ? u+v : u+v-mod;
                    a[i+j+len/2] = u-v >= 0 ? u-v : u-v+mod;
                    w = int (w * 1ll * wlen % mod);
                }
            }
        }
        if (invert) {
            int nrev = pwr(n, mod - 2, mod);
            for (int i=0; i<n; ++i)
                a[i] = int (a[i] * 1ll * nrev % mod);
        }

    }

    long long pwr(long long a, long long b, long long mod) {
        long long ret = 1;
        while (b > 0) {
            if (b & 1) {
                ret = ret * a % mod;
            }
            b >>= 1;
            a = a * a % mod;
        }
        return ret;
    }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>importNTT</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
