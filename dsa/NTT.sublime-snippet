<snippet>
	<content><![CDATA[
//Pranet Verma
#include <bits/stdc++.h>
using namespace std;

/* This function calculates (ab)%c */
int modulo(int a,int b,int c){
    long long x=1,y=a; // long long is taken to avoid overflow of intermediate results
    while(b > 0){
        if(b%2 == 1){
            x=(x*y)%c;
        }
        y = (y*y)%c; // squaring the base
        b /= 2;
    }
    return x%c;
}

/* this function calculates (a*b)%c taking into account that a*b might overflow */
long long mulmod(long long a,long long b,long long c){
    long long x = 0,y=a%c;
    while(b > 0){
        if(b%2 == 1){
            x = (x+y)%c;
        }
        y = (y*2)%c;
        b /= 2;
    }
    return x%c;
}

/* Miller-Rabin primality test, iteration signifies the accuracy of the test */
bool Miller(long long p,int iteration){
    if(p<2){
        return false;
    }
    if(p!=2 && p%2==0){
        return false;
    }
    long long s=p-1;
    while(s%2==0){
        s/=2;
    }
    for(int i=0;i<iteration;i++){
        long long a=rand()%(p-1)+1,temp=s;
        long long mod=modulo(a,temp,p);
        while(temp!=p-1 && mod!=1 && mod!=p-1){
            mod=mulmod(mod,mod,p);
            temp *= 2;
        }
        if(mod!=p-1 && temp%2==0){
            return false;
        }
    }
    return true;
}

int powmod (int a, int b, int p) {
    int res = 1;
    while (b)
        if (b & 1)
            res = int (res * 1ll * a % p),  --b;
        else
            a = int (a * 1ll * a % p),  b >>= 1;
    return res;
}

int generator (int p) {
    vector<int> fact;
    int phi = p-1,  n = phi;
    for (int i=2; i*i<=n; ++i)
        if (n % i == 0) {
            fact.push_back (i);
            while (n % i == 0)
                n /= i;
        }
    if (n > 1)
        fact.push_back (n);

    for (int res=2; res<=p; ++res) {
        bool ok = true;
        for (size_t i=0; i<fact.size() && ok; ++i)
            ok &= powmod (res, phi / fact[i], p) != 1;
        if (ok)  return res;
    }
    return -1;
}

struct NTT {
	int mod, root, root_1, root_pw;

	static vector<pair<int, int> > getSeeds(int root_pw, int cnt) {
		vector<pair<int, int> > ret;
		if (cnt == 0) {
			return ret;
		}
		for (int c = 1; ; ++c) {
			long long mod = c * root_pw + 1;
			if (mod >= 1e9) {
				assert(false && "You are venturing into long long territory");
			}
			if (Miller(mod, 50)) {
				ret.push_back({c, generator(mod)});
				if (ret.size() == cnt) {
					break;
				}
			}
		}
		return ret;
	}

	NTT(int c, int g, int root_pw) : root_pw(root_pw) {
		mod = c * root_pw + 1;
		root = pwr(g, c, mod);
		root_1 = pwr(root, mod - 2, mod);
	}

	void fft (vector<int> & a, bool invert) {
		int n = (int) a.size();
	 
		for (int i=1, j=0; i<n; ++i) {
			int bit = n >> 1;
			for (; j>=bit; bit>>=1)
				j -= bit;
			j += bit;
			if (i < j)
				swap (a[i], a[j]);
		}
	 
		for (int len=2; len<=n; len<<=1) {
			int wlen = invert ? root_1 : root;
			for (int i=len; i<root_pw; i<<=1)
				wlen = int (wlen * 1ll * wlen % mod);
			for (int i=0; i<n; i+=len) {
				int w = 1;
				for (int j=0; j<len/2; ++j) {
					int u = a[i+j],  v = int (a[i+j+len/2] * 1ll * w % mod);
					a[i+j] = u+v < mod ? u+v : u+v-mod;
					a[i+j+len/2] = u-v >= 0 ? u-v : u-v+mod;
					w = int (w * 1ll * wlen % mod);
				}
			}
		}
		if (invert) {
			int nrev = pwr(n, mod - 2, mod);
			for (int i=0; i<n; ++i)
				a[i] = int (a[i] * 1ll * nrev % mod);
		}

	}

	long long pwr(long long a, long long b, long long mod) {
		long long ret = 1;
		while (b > 0) {
			if (b & 1) {
				ret = ret * a % mod;
			}
			b >>= 1;
			a = a * a % mod;
		}
		return ret;
	}
};
const int LN = 20;


int main() {
	int N = 1 << LN;
	auto seeds = NTT::getSeeds(N, 2);
	int mod1 = seeds[0].first * N + 1;
	int mod2 = seeds[1].first * N + 1;
	NTT n1(seeds[0].first, seeds[0].second, N);
	NTT n2(seeds[1].first, seeds[1].second, N);
	vector<int> p1(N), p2(N);

	int n, k;
	scanf("%d %d", &n, &k); 
	for (int i = 0; i < n; ++i) {
		int x;
		scanf("%d", &x);
		p1[x] = 1;
		p2[x] = 1;
	}
	n1.fft(p1, 0);
	n2.fft(p2, 0);
	
	for (int i = 0; i < p1.size(); ++i) {
		p1[i] = n1.pwr(p1[i], k, mod1);
	}
	for (int i = 0; i < p2.size(); ++i) {
		p2[i] = n2.pwr(p2[i], k, mod2);
	}
	n1.fft(p1, 1);
	n2.fft(p2, 1);
	for (int i = 1; i < p1.size(); ++i) {
		if (p1[i] or p2[i]) {
			printf("%d ", i);
		}
	}
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>importNTT</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
