<snippet>
	<content><![CDATA[
struct NTTHelper {

    /* This function calculates (ab)%c */
    static int modulo(int a,int b,int c){
        long long x=1,y=a; // long long is taken to avoid overflow of intermediate results
        while(b > 0){
            if(b%2 == 1){
                x=(x*y)%c;
            }
            y = (y*y)%c; // squaring the base
            b /= 2;
        }
        return x%c;
    }

    /* this function calculates (a*b)%c taking into account that a*b might overflow */
    static long long mulmod(long long a,long long b,long long c){
        long long x = 0,y=a%c;
        while(b > 0){
            if(b%2 == 1){
                x = (x+y)%c;
            }
            y = (y*2)%c;
            b /= 2;
        }
        return x%c;
    }

    /* Miller-Rabin primality test, iteration signifies the accuracy of the test */
    static bool Miller(long long p,int iteration){
        if(p<2){
            return false;
        }
        if(p!=2 && p%2==0){
            return false;
        }
        long long s=p-1;
        while(s%2==0){
            s/=2;
        }
        for(int i=0;i<iteration;i++){
            long long a=rand()%(p-1)+1,temp=s;
            long long mod=modulo(a,temp,p);
            while(temp!=p-1 && mod!=1 && mod!=p-1){
                mod=mulmod(mod,mod,p);
                temp *= 2;
            }
            if(mod!=p-1 && temp%2==0){
                return false;
            }
        }
        return true;
    }

    static int powmod (int a, int b, int p) {
        int res = 1;
        while (b)
            if (b & 1)
                res = int (res * 1ll * a % p),  --b;
            else
                a = int (a * 1ll * a % p),  b >>= 1;
        return res;
    }

    static int generator (int p) {
        vector<int> fact;
        int phi = p-1,  n = phi;
        for (int i=2; i*i<=n; ++i)
            if (n % i == 0) {
                fact.push_back (i);
                while (n % i == 0)
                    n /= i;
            }
        if (n > 1)
            fact.push_back (n);

        for (int res=2; res<=p; ++res) {
            bool ok = true;
            for (size_t i=0; i<fact.size() && ok; ++i)
                ok &= powmod (res, phi / fact[i], p) != 1;
            if (ok)  return res;
        }
        return -1;
    }

    static vector<pair<int, int> > getSeeds(int root_pw, int cnt) {
        vector<pair<int, int> > ret;
        if (cnt == 0) {
            return ret;
        }
        for (int c = 1; ; ++c) {
            long long mod = c * root_pw + 1;
            if (mod >= 1e9) {
                assert(false && "You are venturing into long long territory");
            }
            if (Miller(mod, 50)) {
                ret.push_back({c, generator(mod)});
                if (ret.size() == cnt) {
                    break;
                }
            }
        }
        return ret;
    }

};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>importNTTHelper</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
