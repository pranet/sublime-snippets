<snippet>
	<content><![CDATA[
#define fpos adla
const int inf = 1e9;
const int maxn = 2e5+1e4;
char s[maxn];
map<int, int> to[maxn];
int len[maxn]={inf}, fpos[maxn], link[maxn];
int node, pos;
int sz = 1, n = 0;
 
int make_node(int _pos, int _len)
{
    fpos[sz] = _pos;
    len [sz] = _len;
    return sz++;
}
 
void go_edge()
{
    while(pos > len[to[node][s[n - pos]]])
    {
        node = to[node][s[n - pos]];
        pos -= len[node];
    }
}
 
void add_letter(int c)
{
    s[n++] = c;
    pos++;
    int last = 0;
    while(pos > 0)
    {
        go_edge();
        int edge = s[n - pos];
        int &v = to[node][edge];
        int t = s[fpos[v] + pos - 1];
        if(v == 0)
        {
            v = make_node(n - pos, inf);
            link[last] = node;
            last = 0;
        }
        else if(t == c)
        {
            link[last] = node;
            return;
        }
        else
        {
            int u = make_node(fpos[v], pos - 1);
            to[u][c] = make_node(n - 1, inf);
            to[u][t] = v;
            fpos[v] += pos - 1;
            len [v] -= pos - 1;
            v = u;
            link[last] = u;
            last = u;
        }
        if(node == 0)
            pos--;
        else
            node = link[node];
    }
} 
/* meant to be done after use,not prior*/
void clearSuffixTree()
{
    for(int i=0;i<sz;++i)
        to[i].clear();
    node=0;
    pos=0;
    sz=1;
    n=0;
}
void printTree()
{
    string S(n,'1');
    for(int i=0;i<n;++i)
        S[i]=s[i]+'a';
    for(int i=0;i<sz;++i)
    {
        for(map<int,int>::iterator it=to[i].begin();it!=to[i].end();++it)
        {
            int v=it->second;
            cout<<i<<" "<<v<<" "<<S.substr(fpos[v],len[v])<<endl;
        }
    }
}
void plotGraph(string fileName)
{
    ofstream cout(fileName.c_str());

    string S(n,'1');
    for(int i=0;i<n;++i)
        S[i]=s[i]+'a';
    cout<<"digraph g {\n";
    for(int i=0;i<sz;++i)
    {
        for(map<int,int>::iterator it=to[i].begin();it!=to[i].end();++it)
        {
            int v=it->second;
            cout<<i<<" -> "<<v<<" [ label=\" "<<S.substr(fpos[v],len[v])<<" \" ];\n";
        }
    }   
    cout<<"}";
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>importSuffixTree</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
